{
  "name": "eventflow",
  "version": "0.0.11",
  "description": "Flow control for your event emitters",
  "main": "eventflow.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cpsubrian/node-eventflow.git"
  },
  "keywords": [
    "flow",
    "control",
    "events",
    "event",
    "emitter"
  ],
  "dependencies": {
    "async": "0.1.22"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "author": {
    "name": "Brian Link"
  },
  "license": "MIT",
  "readme": "EventFlow\n=========\n\nFlow control for your event emitters.\n\n[![build status](https://secure.travis-ci.org/cpsubrian/node-eventflow.png)](http://travis-ci.org/cpsubrian/node-eventflow)\n\nAbout\n-----\n\nEventEmitters are an important part of well-designed node.js applications.\n`on()` and `emit()` can get you pretty far, but wouldn't it be great if you\ncould run your event handlers asynchronously, with a continuation callback?\n\n**EventFlow** adds the flow-controlly-goodness of\n[async](https://github.com/caolan/async) to your event emitters.\n\nUsage\n-----\n\n### Creating an EventFlow emitter\n\nCreate a new emitter.\n\n```js\nvar emitter = require('eventflow')();\n```\n\nOr, extend an existing emitter with EventFlow functionality.\n\n```js\nvar EventEmitter = require('events').EventEmitter,\n    emitter = new EventEmitter();\n\nrequire('eventflow')(emitter);\n```\n\nOr, extend an EventEmitter class with EventFlow functionality.\n\n```js\nvar EventEmitter = require('events').EventEmitter,\n    require('eventflow')(EventEmitter),\n    emitter = new EventEmitter();\n```\n\nOr, convert any object into an EventFlow emitter.\n\n```js\nvar emitter = {\n  type: 'car',\n  name: 'Honda'\n};\nrequire('eventflow')(emitter);\n```\n\n### Listen\n\nListen for some events, with or without continuation callbacks. EventFlow does\nsome simple introspection of your listeners to see if they accept a callback\nor not.\n\n```js\nemitter.on('foo', function() {\n  // Do something synchronous\n});\n\nemitter.on('foo', function(callback) {\n  doSomethingAsync(function(bar) {\n    callback();\n  });\n});\n```\n\n### Invoke listeners\n\nNow use one of the flow control methods to invoke your handlers and respond\nwhen they are done.\n\n**series**\n\n```js\nemitter.series('foo', function() {\n  // The listeners ran in the order they were added and are all finished.\n});\n```\n\n**parallel**\n\n```js\nemitter.parallel('foo', function() {\n  // The listeners ran in parallel and are all finished.\n});\n```\n\nErrors\n------\n\nIn synchronous listeners, you can return `Error` objects.\n\n```js\nemitter.on('foo', function () {\n  return new Error('Something broke');\n});\n```\n\nIn async listeners, you should pass an `Error` as the first argument to the\ncallback.\n\n```js\nemitter.on('foo', function (cb) {\n  cb(new Error('Something broke'));\n});\n```\n\nNo matter whether your listeners are sync or async, Errors will always be\npassed back as the first argument in the callback of the invocation.\n\n```js\nemitter.series('foo', function (err) {\n  // `err` is the first error encountered.\n});\n```\n\nAdvanced\n--------\n\n**Event listeners with arguments**\n\nEventFlow supports calling your listeners with any number of arguments, as well\nas the optional continuation callback.\n\n```js\n// In your logger or something:\nemitter.on('purchase', function(name, item, cost) {\n  console.log(name + ' just bought ' + item + ' for ' + cost);\n})\n\n// Somwhere else in your code:\nemitter.on('purchase', function(name, item, cost, callback) {\n  saveToDB({name: name, item: item, cost: cost}, callback);\n});\n\n// Perhaps in a form POST handler:\nemitter.series('purchase', 'Brian', 'T-Shirt', '$15.00', function() {\n  // The purchase was logged and saved to the db.\n});\n```\n\n**Using async-style `callback(err, results)`**\n\nEventFlow uses async directly to handle the flow-control, so you can use `err`\nand `results` just like you already do.\n\n```js\n// Synchronous listeners can return a result.\nemitter.on('fruit', function() {\n  return 'apple';\n});\n\n// Async listeners use the standard (err, result) callback.\nemitter.on('fruit', function(callback) {\n  callback(null, 'orange');\n});\n\nemitter.series('fruit', function(err, results) {\n  console.log(results);\n  // [ 'apple', 'orange' ]\n});\n```\n\nWaterfall\n---------\n\nThe waterfall method allows listeners to modify a variable in a series. The\nfirst listener receives an initial value, and each subsequent listener modifies\nthe return of the last listener:\n\n```js\nemitter.on('foo', function(n) {\n  // sync task\n  return n + 1;\n});\nemitter.on('foo', function(n, callback) {\n  // async task\n  cb(null, n * 3);\n});\nemitter.waterfall('foo', 2, function(err, n) {\n  // n = 9\n});\n```\n\nInvoke\n------\n\nEventFlow also attaches the method `emitter.invoke(event, [args...], callback)`.\nInvoke executes using the following rules:\n\n1. There must be EXACTLY one listener for the event. Otherwise the callback\n   is called with an error.\n2. The listener can `return` a value and if so, callback is called with `callback(err, value)`.\n3. The listener can accept a continuation callback and if so, that function should\n   be called with `(err, [value])`.\n\nThink of 'invoke' as in-app RPC via an EventEmitter. Instead of passing\nfunctions around your app in `options` objects, you can invoke them instead.\n\n**Example**\n\n```js\nemitter.on('add', function(a, b) {\n  return a + b;\n});\nemitter.invoke('add', 1, 2, function(err, value) {\n  console.log(value);\n  // 3\n});\n\n\nemitter.on('subtract', function(a, b, callback) {\n  callback(null, a - b);\n});\nemitter.invoke('subtract', 3, 2, function(err, value) {\n  console.log(value);\n  // 1\n});\n```\n\nExample Use Case: Model API\n---------------------------\n\nLets say you are designing a simple model api around redis (or whatever db you\nuse). It has the following API:\n\n```js\nfunction Model () {\n  // Constructor stuff.\n}\nModel.prototype = {\n  load: function (id, cb) {\n    // Load a model from the db.\n  },\n  save: function (cb) {\n    // Save the model.\n  }\n}\nmodule.exports = Model;\n```\n\nYou know your app will need to support validation, but you dont want\nthis Model module to include any of the app-specific validation logic. Using\nEventFlow, you could just use a 'validate' event to abstract it away.\n\n```js\nvar eventflow = require('eventflow');\n\nfunction Model () {\n  // Constructor stuff.\n}\n\neventflow(Model);\n\nModel.prototype = {\n  load: function (id, cb) {\n    // Load a model from the db.\n  },\n  save: function (cb) {\n    Model.parallel('validate', this, function (err) {\n      if (err) {\n        // There was an error validating the model or it was invalid.\n        return cb(err);\n      }\n      else {\n        // Save the model and eventually call `cb(null)`.\n      }\n    });\n  }\n}\n\nmodule.exports = Model;\n```\n\nNow your app could do something like the following:\n\n```js\nvar Model = require('./path/to/model');\n\n// Simple validation.\nModel.on('validate', function (model) {\n  if (model.title.length > 50) {\n    return new Error('Titles should be 50 chars or less.');\n  }\n});\n\n// Async validation that hits a db or something.\nModel.on('validate', function (model, cb) {\n  Model.load(model.id, function (err, model) {\n    if (err) return cb(err);\n    if (model) return cb(new Error('A model already exists for this id.'));\n    cb(null);\n  });\n});\n\nvar thing = new Model();\nthing.save(function (err) {\n  // Validation errors would appear here.\n});\n```\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\nCopyright (C) 2012 Terra Eclipse, Inc. ([http://www.terraeclipse.com](http://www.terraeclipse.com))\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "_id": "eventflow@0.0.11",
  "_from": "eventflow@0.0.11"
}
