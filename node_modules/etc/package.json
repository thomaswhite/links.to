{
  "name": "etc",
  "version": "0.2.0",
  "description": "Configuration loader for node.js applications",
  "main": "etc.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cpsubrian/node-etc.git"
  },
  "dependencies": {
    "optimist": "~0.3.4",
    "glob": "~3.1.12",
    "witwip": "~0.0.2",
    "eventflow": "~0.0.11",
    "tea-merge": "~0.1.0",
    "clone": "~0.1.6"
  },
  "devDependencies": {
    "mocha": "*",
    "bench": "*"
  },
  "keywords": [
    "config",
    "configuration",
    "yaml",
    "json",
    "redis"
  ],
  "author": {
    "name": "Brian Link"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "node-etc\n========\n\nConfiguration loader for node.js applications.\n\n[![build status](https://secure.travis-ci.org/cpsubrian/node-etc.png)](http://travis-ci.org/cpsubrian/node-etc)\n\nIdea\n----\nYour application probably needs to load configuration from multiple sources and\nmake them available as one object. Etc is here to help!\n\nEtc provides a fairly complete API for loading configuration from a\nvariety of sources, however, its been engineered to easily load config from\n(in order of precedence): argv, environment, files in `./etc`, package.json, and\n defaults. Etc. also supports a simple plugin system so new file parsers or other\n sources of configuration can be handled.\n\nEtc 0.2.x Changes\n-----------------\n**Attention Etc 0.1.x Users** - Etc 0.1.x used `proto-list-deep` as its primary\ninternal configuration store. This was *probably* fast for writes, but as it\nturns out the deep-merging going on in `proto-list-deep` (for `conf.get()`) is\npretty slow. I hit a personal use-case where I need reasonably fast `conf.get()`\ncalls. I tried a few different iterations and came up with 0.2.x, which uses\nan object literal to store the conf and uses a combination of `clone` and\n`tea-merge` to handle sets and gets.\n\nThe API has not changed, however, depending on your specific configuration\n**the values of your conf may have changed**. `tea-merge` is much more\nintelligent about merging than `proto-list-deep` was, specifically when\ndealing with arrays. If you upgrade, please check that your conf is\nstill merging how you think it should. Thanks!\n\nHere is an idea of the speed-up from 0.1.x:\n\n```\n$ node bench/bench.js\nbenchmarking /Users/cpsubrian/projects/node/brian/etc/bench/bench.js\nPlease be patient.\n{ http_parser: '1.0',\n  node: '0.8.19',\n  v8: '3.11.10.25',\n  ares: '1.7.5-DEV',\n  uv: '0.8',\n  zlib: '1.2.3',\n  openssl: '1.0.0f' }\nScores: (bigger is better)\n\nmerge\nRaw:\n > 2187.812187812188\n > 2200.7992007992007\n > 2195.804195804196\n > 2194.805194805195\nAverage (mean) 2194.805194805195\n\nproto\nRaw:\n > 14.381591562799617\n > 14.619883040935672\n > 14.45086705202312\n > 14.409221902017292\nAverage (mean) 14.465390889443926\n\nWinner: merge\nCompared with next highest (proto), it's:\n99.34% faster\n151.73 times as fast\n2.18 order(s) of magnitude faster\nA LOT FASTER\n\n```\n\nExamples\n--------\n#### Easy Mode\n```js\nvar conf = require('etc')().all().toJSON();\n```\n\n#### Easy Mode done manually\n```js\nvar etc = require('etc')();\n\netc\n  .argv()\n  .env()\n  .etc()\n  .pkg();\n\nvar conf = etc.toJSON();\n```\n\n#### Load configuration from argv, env, a file, and defaults.\n```js\nvar etc = require('etc')();\n\netc.argv();\netc.env();\netc.file('/path/to/you/file/config.json');\netc.add({\n  my: 'defaults'\n});\n\nvar conf = etc.toJSON();\n```\n\n#### Load configuration from `/etc/myapp/*`\n```js\nvar etc = require('etc')();\netc.folder('/etc/myapp');\nvar conf = etc.toJSON();\n```\n\n#### Work with configuration using deliminated keys\n```js\nvar etc = require('etc')();\n\netc.add({\n  host: 'localhost',\n  port: 3000,\n  meta: {\n    title: 'Cool title'\n  }\n});\n\nconsole.log(etc.get('meta:title'));\n// Cool title\n\netc.set('meta:description', 'This is a really cool app');\n\nconsole.log(etc.get('meta'));\n// { title: 'Cool title',\n//  description: 'This is a really cool app' }\n```\n\nAPI\n---\n### require('etc')([delim])\nEtc exports a factory function the creates instances of `Etc` objects. You can\noptionally specify the key delimiter to use (defaults to ` : `)\n\n### etc.get(key)\nFetch a value from the configuration stack. Keys can be simple strings or\ndeliminated strings such as `db:host`, which will dive into the configuration\nto grab a nested value.\n\n### etc.set(key, value)\nSet a new configuration value. The key can be a simple string or a deliminated\nstring. (Chainable)\n\n### etc.toJSON()\nReturns all of the configuration, deep-merged into a single object.\n\n### etc.use(plugin, options)\nAttach an etc plugin. See more below. (Chainable)\n\n### etc.all()\nAlias for `etc.argv().env().etc().pkg()` (Chainable)\n\n### etc.argv()\nParses argv using [optimist](https://github.com/substack/node-optimist)\nand adds it to the configuration. (Chainable)\n\n### etc.env(prefix [app], delim [_])\nAdds any environment variables that start with the prefix\n(defaults to 'app_') to the configuration. The prefix is stripped from the key.\n (Chainable)\n\n### etc.add(obj)\nAdd configuration from an object literal. (Chainable)\n\n### etc.file(filePath, [nameed])\nAdd configuration from a file. A suitable parser must be registered\nin etc.parsers ('.json' and '.js' supported by default). If `named` is true\nthen the extension will be stripped from the filename and the contents will\nbe added nested under that name.\n\nFor example, if your filename is `/path/to/conf/db.json`, then the configuration\nwill be added like:\n\n```\n{\n  \"db\": { [contents of db.json ] }\n}\n\n```\n(Chainable)\n\n### etc.folder(dir)\nLoops through the files in `dir` and adds them to the configuration.\nAll files will be added with `named=true` (see etc.file()), except for one\nspecial case when the filename is `config.*`. (Chainable)\n\n### etc.pkg()\nTry to find the local `package.json` for the consumer of etc and\nlook for an `etc` key in it. If it exists then add the contents to the\nconfiguration.\n\nExample:\n```\n{\n  \"name\": \"etc-example\",\n  \"description\": \"Etc example\",\n  \"main\": \"example.js\",\n  \"dependencies\": {\n    \"etc\": \"*\"\n  },\n  \"etc\": {\n    \"db\": {\n      \"host\": \"localhost\",\n      \"port\": 3000\n    }\n  }\n}\n```\n(Chainable)\n\n### etc.etc()\nLook for `[app root]/etc` (based on location of package.json) and\nload it using `etc.folder()`. (Chainable)\n\n### etc.reverse()\nBy default, each call to etc that adds more configuration pushes it on the\nbottom of the stack. If you wish to unshift conf onto the top of the stack\ninstead you can call `etc.reverse()` followed by any other etc commands.\nUntil you call `etc.reverse()` again all subsequent etc methods will continue\nto unshift.\n\nPlugins\n-------\nEtc supports a simple plugin system, primarily useful for adding new file\nparsers. Plugins should implement an `attach` method like so:\n\n```js\nexports.attach = function(options) {\n  options = options || {};\n\n  // Plugin will be attached with the scope set to an etc instance.\n  var etc = this;\n\n  etc.parsers['xml'] = xmlparser;\n}\n\nfunction xmlparser(filePath) {\n  // Parse the file and return an object literal.\n}\n```\n\n### etc-yaml\nSupport for YAML configuration files can be added via [etc-yaml](https://github.com/cpsubrian/node-etc-yaml).\n```js\nvar etc = require('etc'),\n    path = require('path'),\n    conf = etc();\n\nconf.use(require('etc-yaml'));\n\n// Load a yaml file.\nconf.file(path.join(__dirname, 'config.yaml'));\n\n// Print the config.\nconsole.log(conf.toJSON());\n```\n\n### etc-redis\nComing soon\n\n\nCredits\n-------\nInspired by [dominictarr/rc](https://github.com/dominictarr/rc) and\n[dominictarr/config-chain](https://github.com/dominictarr/config-chain), but\nwith deep-merging and less trolling in the README :)\n\n\nDeveloped by [Terra Eclipse](http://www.terraeclipse.com)\n--------------------------------------------------------\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n[http://www.terraeclipse.com](http://www.terraeclipse.com)\n\n\nLicense: MIT\n------------\nCopyright (C) 2012 Terra Eclipse, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "_id": "etc@0.2.0",
  "_from": "etc@~0.2.0"
}
